name: Train model, build and release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    branches: [main]

jobs:
  dvc-repro:
    name: "Run complete DVC pipeline"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Install poetry
        run: pipx install poetry
      - name: Setup Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
          cache: poetry
      - name: Setup Python dependencies
        run: poetry install
      - name: Setup DVC
        uses: iterative/setup-dvc@v1
      - name: Run DVC pipeline
        run: |
          dvc repro
      - name: Read model metrics
        id: read-model-metrics
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          MARKDOWN_METRICS=$(dvc metrics show --md)
          MARKDOWN_METRICS="${MARKDOWN_METRICS//$'\n'/'%0A'}"
          echo "::set-output name=markdown-metrics::$MARKDOWN_METRICS"
          AVG_PRECISION=$(dvc metrics show | awk '/model_metrics.json/ {print $3; exit 0;}')
          echo "::set-output name=avg-precision::$AVG_PRECISION"
      - name: "Update PR with model metrics"
        if: ${{ github.event_name == 'pull_request' && !env.ACT }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comment if it exists
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Model metrics')
            })

            const metricsReport = `
              <details><summary>Model metrics output:</summary>
              
              # Model metrics
              
              ${{ steps.read-model-metrics.outputs.markdown-metrics }}
              
              </details>`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: metricsReport
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: metricsReport
              })
            }
      - name: Model precision warning
        env:
          PRECISION_THRESHOLD: ${{ 0.4 }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        if: ${{ steps.read-model-metrics.outputs.avg-precision < env.PRECISION_THRESHOLD && github.event_name == 'pull_request' }}
        run: |
          cd notifications
          poetry run python3 telegram.py low_precision \
            "${{ github.actor }}" "${{ github.event.pull_request.title }}" "${{ github.event.pull_request.html_url }}" "${{ steps.read-model-metrics.outputs.avg-precision }}"

      # On pushes to main, we bump the minor version and push a new v* tag
      - name: Bump version and push tag
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        id: bumpVersion
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true

      - name: Tag the created docker images
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          docker images
          docker image tag nidhogg-inference:latest ghcr.io/fastjur/nidhogg/nidhogg-inference:latest
          docker image tag nidhogg-inference:latest ghcr.io/fastjur/nidhogg/nidhogg-inference:${{ steps.bumpVersion.outputs.tag }}
          docker image tag nidhogg-frontend:latest ghcr.io/fastjur/nidhogg/nidhogg-frontend:latest
          docker image tag nidhogg-frontend:latest ghcr.io/fastjur/nidhogg/nidhogg-frontend:${{ steps.bumpVersion.outputs.tag }}

      - name: Log in to the Container registry
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push the docker images to the Container registry
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          docker image push --all-tags ghcr.io/fastjur/nidhogg/nidhogg-inference
          docker image push --all-tags ghcr.io/fastjur/nidhogg/nidhogg-frontend

      - name: Create a Release
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1.10.0
        with:
          generateReleaseNotes: true
          tag: ${{ steps.bumpVersion.outputs.tag }}
